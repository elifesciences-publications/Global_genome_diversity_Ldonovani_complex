indel.samp<-unlist(lapply(strsplit(strsplit(paste(all.indels.sub[chr==35 & epos-spos+1>=20,samples.id],collapse = ","),split=",")[[1]],split=":"),function(x) x[2]))
inspect_chr_region(sample.c=indel.samp, chrom=35, genome.cov=genome.cov, region=pos, cap=6, ptsize = 0.2, orient="h", LD1=T)
pdf(paste0("Chr35_largestIndels_all.pdf"))
inspect_chr_region(sample.c=indel.samp, chrom=35, genome.cov=genome.cov, region=pos, cap=6, ptsize = 0.2, orient="h", LD1=T)
dev.off()
write.table(all.indels.sub[chr==35 & epos-spos+1>=20], file="Chr35_largestIndels_all.txt", quote=F, row.names = F)
dir.create("indels_both_species", showWarnings = F)
for (i in all.indels.sub[Linf.gr==T & Ldon.gr==T,][,id])
{
print(i)
row<-all.indels.sub[id==i]
sample.c<-get_samples_mean_dist(row)
pdf(paste0("indels_both_species/id_",as.character(row[,id]),"_chr",row[,chr],"_type",row[,indel],"_nGroups",row[,groups.num],".pdf"),
width=8,height=10)
inspect_chr_region(sample.c, chrom=row[,chr], genome.cov=genome.cov, region=c(row[,spos],row[,epos]), cap=8, ncol=2)#8)
dev.off()
if (row[,indel]=="insertion") {
xxx<-indels[sample %in% sample.c & chr==row[,chr] & insert.pres==T & abs(spos-row[,spos])<=4 & abs(epos-row[,epos])<=4]
} else {
xxx<-indels[sample %in% sample.c & chr==row[,chr] & insert.pres==F & abs(spos-row[,spos])<=4 & abs(epos-row[,epos])<=4]
}
xxx[,abs_copy:=ploidy+medianSomyDiff]
write.table(xxx, file=paste0("indels_both_species/id_",as.character(row[,id]),"_chr",row[,chr],"_type",row[,indel],"_nGroups",row[,groups.num],".txt"),
quote=F, row.names = F)
}
all.indels.sub[chr==35 & epos-spos+1>=20]
pos<-c()
# for (i in 1:nrow(all.indels.sub[chr==35 & epos-spos+1>=20]))
# {
#   pdf(paste0("Chr35_largestIndels",i,".pdf"))
#   indel.id<-all.indels.sub[chr==35 & epos-spos+1>=20][i,samples.id]
#   spos<-all.indels.sub[chr==35 & epos-spos+1>=20][i,spos]
#   epos<-all.indels.sub[chr==35 & epos-spos+1>=20][i,epos]
#   if (grepl(",",indel.id)) {pos<-c(pos, spos,epos)}
#   indel.samp<-unlist(lapply(strsplit(strsplit(paste(indel.id, collapse = ","), split=",")[[1]], split=":"),function(x) x[2]))
#   inspect_chr_region(sample.c=indel.samp, chrom=35, genome.cov=genome.cov, region=c(spos,epos), cap=4, ptsize = 0.2)
#   dev.off()
# }
indel.samp<-unlist(lapply(strsplit(strsplit(paste(all.indels.sub[chr==35 & epos-spos+1>=20,samples.id],collapse = ","),split=",")[[1]],split=":"),function(x) x[2]))
pdf(paste0("Chr35_largestIndels_all.pdf"))
inspect_chr_region(sample.c=indel.samp, chrom=35, genome.cov=genome.cov, region=pos, cap=6, ptsize = 0.2, orient="h", LD1=T)
dev.off()
write.table(all.indels.sub[chr==35 & epos-spos+1>=20], file="Chr35_largestIndels_all.txt", quote=F, row.names = F)
library(data.table)
library(foreach)
library(ggplot2)
library(reshape2)
library(stringr)
library(gplots)
library(igraph)
setwd("~/work/Leish_donovaniComplex/MS01_globalDiversity_Ldonovani/github_scripts/Global_genome_diversity_Ldonovani_complex/10_CNVs/")
dir.create("CNV_large", showWarnings = F)
setwd("CNV_large")
load("../../01_phylogenetic_reconstruction/sample.info_NEWsubgroups.RData")
#----------------------------------
# functions
#----------------------------------
# boVec: boolean vector indicating where an insert (or deletion, not both at the same time) is
# valVec: int vector indicating which copy number differenece the respective window has
# will output spos and epos of consecutive Trues
get_spos_epos<-function(boVec,valVec)
{
res<-c(NA,NA,NA,NA,NA,NA)
spos=NA
epos=NA
indelVals=c() # copy number vals of the windows in the current indel
for (w in 1:length(boVec)) #go through all windows of this chromosome and sample
{
# middle pos in insert
if (boVec[w]==T & !is.na(spos)) {indelVals=c(indelVals,valVec[w])}
# first pos in insert
if (boVec[w]==T & is.na(spos)) {spos=w; indelVals=valVec[w]}
# last pos in insert
if (boVec[w]==F & !is.na(spos)) {
epos=w-1
res<-rbind(res,c(spos, epos, epos-spos+1, mean(indelVals),  median(indelVals),  sd(indelVals)))
spos=NA; epos=NA
}
}
if (!is.na(spos)) {epos=w;  res<-rbind(res,c(spos, epos, epos-spos+1, mean(indelVals),  median(indelVals),  sd(indelVals)))}
res<-data.table(res)
setnames(res, colnames(res), c("spos","epos", "length","meanSomyDiff","medianSomyDiff","sdSomyDiff"))
res[!is.na(epos)]
}
hclust.ave <- function(x) hclust(x, method="average")
# determine the list of unique indels for a given chromosome and indel type
# chrom chromosome number
# indel indel type either insertion or deletion
# win_dist number of windows the spos and epos can be different and still be counted as identical location
get_unique_indels<-function(chrom=27, indel="deletion", indels=indels, win_dist)
{
if (indel=="deletion") {indel.sub<-indels[chr==chrom & deletion.pres==T]
} else if (indel=="insertion") {indel.sub<-indels[chr==chrom & insert.pres==T]
} else {stop()}
if (nrow(indel.sub)==0) # no indels are present on this chr
{
zz<-data.table(rbind(c(indel, chrom, spos=NA, epos=NA, mean_dist=NA, samples.num=NA, groups.num=NA, samples.id=NA, groups.id=NA),
c(indel, chrom, spos=NA, epos=NA, mean_dist=NA, samples.num=NA, groups.num=NA, samples.id=NA, groups.id=NA)))
setnames(zz,paste0("V",1:2), c("indel","chr"))
zz
} else
{
indel.sub[, id:=paste0(name,":",spos)] # unique ID for each line
edges<-c()
if (nrow(indel.sub)>1) # only one indel in total
{
for (i in 1:(nrow(indel.sub)-1))
{
for (j in (i+1):nrow(indel.sub))
{
if ((abs(indel.sub[id==indel.sub[i,id], spos] - indel.sub[id==indel.sub[j,id], spos]) <=win_dist) & (abs(indel.sub[id==indel.sub[i,id], epos] - indel.sub[id==indel.sub[j,id], epos]) <=win_dist))
{
edges<-c(edges, unlist(c(indel.sub[i,id], indel.sub[j,id])))
}
}
}
}
if (is.null(edges)) # none of the indels are "identical"
{
zz<-foreach (l = 1:nrow(indel.sub), .combine=rbind) %do%
{
c(indel, chrom, spos=indel.sub[l,spos], epos=indel.sub[l,epos], mean_dist=1, samples.num=1, groups.num=1, samples.id=indel.sub[l,id], groups.id=as.character(indel.sub[l,group]))
}
if (nrow(indel.sub)==1) {zz<-rbind(zz,c(indel, chrom, spos=NA, epos=NA, mean_dist=NA, samples.num=NA, groups.num=NA, samples.id=NA, groups.id=NA))}
zz<-data.table(zz)
setnames(zz,paste0("V",1:2), c("indel","chr"))
zz
} else # identical indels exist
{
# make graph to find "identical" indels
# all nodes that are unconnected, need to be added separately
addnodes<-indel.sub[,id][!indel.sub[,id] %in% unique(edges)]
edges<-c(edges,sort(rep(addnodes,times=2)))
a<-make_graph(edges, directed = FALSE) # only includes nodes that are connected
b<-decompose(a)
clusters<-list()
clusters.mean_dist<-c()
for ( i in 1:length(b)) # go through all disconnected subgraphs
{
clusters[[i]]<-V(b[[i]])$name
clusters.mean_dist<-c(clusters.mean_dist, round(mean_distance(b[[i]]),2))
# print(mean_distance(b[[i]]))
# print(V(b[[i]])$name)
# cc<-cluster_edge_betweenness(b[[i]])
# dendPlot(cc, mode="hclust")
# plot(cc, b[[i]])
# length(cc)
# membership(cc)
}
res<-foreach (i = 1:length(clusters), .combine=rbind) %do%
{
spos<-median(indel.sub[id %in% clusters[[i]], spos])
epos<-median(indel.sub[id %in% clusters[[i]], epos])
mean_dist<-clusters.mean_dist[i]
samples.num<-length(clusters[[i]])
samples.id<-paste0(clusters[[i]], collapse = ",")
groups.num<-length(unique(indel.sub[id %in% clusters[[i]], group]))
groups.id<-paste0(unique(indel.sub[id %in% clusters[[i]], group]), collapse = ",")
c(indel, chrom, spos, epos, mean_dist, samples.num, groups.num, samples.id, groups.id)
}
if (length(clusters)==1) {res<-rbind(res,c(indel, chrom, spos=NA, epos=NA, mean_dist=NA, samples.num=NA, groups.num=NA, samples.id=NA, groups.id=NA))}
res<-data.table(res)
setnames(res, colnames(res), c("indel","chr","spos","epos","mean_dist","samples.num","groups.num","samples.id","groups.id"))
res
}
}
}
# get samples ids from the "unique" indel using the indel table all.indels.sub
get_samples_mean_dist<-function(all.indels.sub.row)
{
samps<-strsplit(all.indels.sub.row[, samples.id], split=":")[[1]][rep(c(F,T),as.numeric(all.indels.sub.row[, samples.num])+1)]
samps[1:length(samps)-1]
}
# inspect a chromosome for a specific sample
# prints the window based genome coverage for the respective chromosome and mark the identified indel regions
inspect_chr<- function(sample.c=c("CH32"), chrom=31, genome.cov=genome.cov, indels=indels)
{
gg<-ggplot(data=genome.cov[chr==chrom & sample %in% sample.c], aes(x=win, y=cov.chrSomyNorm.diff, col=indel)) +
geom_point(size=0.6)+
labs(x=paste0("Window [",winsize/1000,"kb] on chromsome ",chrom), y="Copy number difference, normalised by somy") +
theme_bw() +
# geom_vline(xintercept = c(indels[sample==sample.c & chr==chrom, spos], indels[sample==sample.c & chr==chrom, epos])) +
facet_wrap(~id,ncol=2)
# theme(strip.background =element_rect(fill=c("red")))+
# facet_grid(sample~chr)#, scales="free")
# theme(legend.position="none") #+
plot(gg)
}
# inspect a chromosome for a specific sample
# prints the window based genome coverage for the respective chromosome and mark the identified indel regions
# region vector of the window numbers
# cap specifies the maximum coverage to be plotted, larger values will be set to the specified cap value
inspect_chr_region <- function(sample.c=c("CH32"), chrom=31, genome.cov=genome.cov, region=c(), cap=40, ptsize=0.6, orient="v", ncol=2, LD1=F)
{
genome.cov.sub<-genome.cov[chr %in% chrom & sample %in% sample.c]
genome.cov.sub[cov.chrSomyNorm.diff>cap, cov.chrSomyNorm.diff:=cap]
gg<-ggplot(data=genome.cov.sub, aes(x=win, y=cov.chrSomyNorm.diff, col=indel)) +
geom_point(size=ptsize)+
theme_bw()
if (length(chrom)==1)
{
gg<-gg+facet_wrap(~id,ncol=ncol) +
labs(x=paste0("Window [",winsize/1000,"kb] on chromsome ",chrom), y="Copy number difference, normalised by somy")
} else {
gg<-gg+facet_grid(chr~id, scales="free") +
labs(x=paste0("Window [",winsize/1000,"kb] on chromsome ",chrom[1],"-",chrom[36]), y="Copy number difference, normalised by somy")
}
if (length(unique(genome.cov.sub$indel))==3) {
gg<-gg+scale_colour_manual(values=c("red","blue","gray"))
}
if (length(unique(genome.cov.sub$indel))==2 & "insertion" %in% unique(genome.cov.sub$indel)) {
gg<-gg+scale_colour_manual(values=c("blue","gray"))
}
if (length(unique(genome.cov.sub$indel))==2 & "deletion" %in% unique(genome.cov.sub$indel)) {
gg<-gg+scale_colour_manual(values=c("red","gray"))
}
if (!is.null(region)) {
gg<-gg+geom_vline(xintercept = region, size=0.2, linetype="dotted")
}
if (LD1==T)
{
# gg<-gg+geom_rect(aes(xmin=393, xmax=413, ymin=-3, ymax=6), fill="green", alpha=0.5, inherit.aes = FALSE)
gg<-gg+annotate("rect", xmin=393, xmax=413, ymin=-3.3, ymax=6, alpha = 0.2, fill="green")
}
plot(gg)
}
#----------------------------------
# variables
#----------------------------------
# get chr sizes
chr.size<-data.table(read.table("../../09_group_popgen/TriTrypDB-38_LinfantumJPCM5_Genome.fasta.fai"))
chr.size[,V3:=NULL]; chr.size[,V4:=NULL]; chr.size[,V5:=NULL]
setnames(chr.size,colnames(chr.size),c("chrom","size"))
chr.size<-chr.size[order(chrom)]
chr.size<-chr.size[!1:nrow(chr.size) %in% grep("LinJ.00",chr.size$chrom)]
chr.size[,chrom:=as.numeric(unlist(lapply(strsplit(as.character(chr.size[,chrom]),split="J."), function(x) x[2])))]
#----------------------------------
# load somy and median chr coverage data
# load(file="../../A10_raw_somies/somy_all.RData")
load(file="../somy_all.RData")
all
setwd("~/work/Leish_donovaniComplex/MS01_globalDiversity_Ldonovani/github_scripts/Global_genome_diversity_Ldonovani_complex/")
getdeviance <- function(peakx, somy)
{
freqs<-1/somy * 1:(somy-1)
deviance <-foreach (peakx.f=peakx, .combine="+") %do%
{
# peakx.f=peakx[1]
peakx.f.i <-which.min(abs(peakx.f - freqs))
sqrt(abs(freqs[peakx.f.i] - peakx.f))
}
deviance / length(peakx)
}
#-------------------------------------
load("05_heterozygosities/hets_sample_heterozygosities.RData"))
#-------------------------------------
load("05_heterozygosities/hets_sample_heterozygosities.RData")
sample.het<-names(sort(hets[hets>0.004], decreasing = T))
sample.het<-sub("X","", sample.het)
sample.het<-sub(".","-", sample.het, fixed=T)
names(hets)
#
# all[,Deviance.sum:=sum(Deviance), by=.(sample)]
# all[,Deviance.max:=max(Deviance), by=.(sample)]
# all[,Somy.mod.T:=sum(Somy.mod)>1, by=.(sample)]
# all[, het:=F]
#
# # sample.het<-names(sort(hets[hets>0.004], decreasing = T))
# all[sample_noX %in% sample.het, het:=T]
#
# save(all, file="somy_all.RData")
load(file="somy_all.RData")
getwd()
setwd("~/work/Leish_donovaniComplex/MS01_globalDiversity_Ldonovani/github_scripts/Global_genome_diversity_Ldonovani_complex/10_CNVs/")
#-------------------------------------
load("../05_heterozygosities/hets_sample_heterozygosities.RData")
sample.het<-names(sort(hets[hets>0.004], decreasing = T))
sample.het<-sub("X","", sample.het)
sample.het<-sub(".","-", sample.het, fixed=T)
#
# # load all somy data estimated by Caroline
# all<-foreach (s = names(hets), .combine=rbind) %do% # go through all samples
# {
#   s.mod<-sub("X","", s)
#   s.mod<-sub(".","-", s.mod, fixed=T)
#   print(paste(s.mod,s))
#   dat<-data.table(read.table(paste0("/lustre/scratch118/infgen/team133/cd16/ploidy/leish_global/Somy.summarystats.linj.",s.mod,".maxsomy10.txt"),
#                              head=T))
#   # dat<-data.table(read.table(paste0(path,"/Somy.summarystats.linj.",s.mod,".maxsomy10.txt"),head=T))
#   if(ncol(dat)==6) {dat[,Somy.mod:=0]}
#   dat[,sample:=s]
#   dat[,sample_noX:=s.mod]
#
#   dat
# }
#
# all[Somy==3 & sample %in% c("EP","CH32","CH34","GE"),] # AAAAAAA
#
#
# all[,Deviance.sum:=sum(Deviance), by=.(sample)]
# all[,Deviance.max:=max(Deviance), by=.(sample)]
# all[,Somy.mod.T:=sum(Somy.mod)>1, by=.(sample)]
# all[, het:=F]
#
# # sample.het<-names(sort(hets[hets>0.004], decreasing = T))
# all[sample_noX %in% sample.het, het:=T]
#
# save(all, file="somy_all.RData")
load(file="somy_all.RData")
all
dir.create("CNV_gene", showWarnings = F)
library(data.table)
library(foreach)
library(ggplot2)
library(reshape2)
library(ape)
library(vegan)
library(topGO)
setwd("~/work/Leish_donovaniComplex/MS01_globalDiversity_Ldonovani/github_scripts/Global_genome_diversity_Ldonovani_complex/")
dir.create("CNV_gene", showWarnings = F)
setwd("CNV_gene")
install.packages("topGO")
version()
R.version
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("topGO")
library(data.table)
library(foreach)
library(ggplot2)
library(reshape2)
library(ape)
library(vegan)
library(topGO)
setwd("~/work/Leish_donovaniComplex/MS01_globalDiversity_Ldonovani/github_scripts/Global_genome_diversity_Ldonovani_complex/")
dir.create("CNV_gene", showWarnings = F)
setwd("CNV_gene")
#----------------------------------
# functions
cormat_heatmap <-function(cormat, reorder=T, cor.stat="Pearson\nCorrelation")
{
library(ggplot2)
library(reshape2)
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
if (reorder) {cormat <- reorder_cormat(cormat)}
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
melted_cormat$value<-round(melted_cormat$value,2)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0.5, limit = c(0,1), space = "Lab",
name=cor.stat) +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
# geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) + ######
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# Print the heatmap
print(ggheatmap)
}
#----
# GOid: to search
# GO2geneID: GO to gene mapping
get_genes_for_GO <- function(GOid, GO2geneID)
{
if (GOid %in% names(GO2geneID))
{
ii<- GOid == names(GO2geneID)
GO2geneID[ii][[1]]
} else {
NA
}
}
# load somy (median chr coverage data not to be used from this file)
load(file="../somy_all.RData")
getwd()
library(data.table)
library(foreach)
library(ggplot2)
library(reshape2)
library(ape)
library(vegan)
library(topGO)
setwd("~/work/Leish_donovaniComplex/MS01_globalDiversity_Ldonovani/github_scripts/Global_genome_diversity_Ldonovani_complex/")
dir.create("CNV_gene", showWarnings = F)
setwd("CNV_gene")
?topGO
setwd("~/work/Leish_donovaniComplex/MS01_globalDiversity_Ldonovani/github_scripts/Global_genome_diversity_Ldonovani_complex/")
dir.create("CNV_gene", showWarnings = F)
setwd("CNV_gene")
getwd()
cormat_heatmap <-function(cormat, reorder=T, cor.stat="Pearson\nCorrelation")
{
library(ggplot2)
library(reshape2)
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
# Reorder the correlation matrix
if (reorder) {cormat <- reorder_cormat(cormat)}
upper_tri <- get_upper_tri(cormat)
# Melt the correlation matrix
melted_cormat <- melt(upper_tri, na.rm = TRUE)
melted_cormat$value<-round(melted_cormat$value,2)
# Create a ggheatmap
ggheatmap <- ggplot(melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0.5, limit = c(0,1), space = "Lab",
name=cor.stat) +
theme_minimal()+ # minimal theme
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
# geom_text(aes(Var2, Var1, label = value), color = "black", size = 4) + ######
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
legend.justification = c(1, 0),
legend.position = c(0.6, 0.7),
legend.direction = "horizontal") +
guides(fill = guide_colorbar(barwidth = 7, barheight = 1,
title.position = "top", title.hjust = 0.5))
# Print the heatmap
print(ggheatmap)
}
#----
# GOid: to search
# GO2geneID: GO to gene mapping
get_genes_for_GO <- function(GOid, GO2geneID)
{
if (GOid %in% names(GO2geneID))
{
ii<- GOid == names(GO2geneID)
GO2geneID[ii][[1]]
} else {
NA
}
}
setwd("~/work/Leish_donovaniComplex/MS01_globalDiversity_Ldonovani/github_scripts/Global_genome_diversity_Ldonovani_complex/10_CNVs/")
dir.create("CNV_gene", showWarnings = F)
setwd("CNV_gene")
# load somy (median chr coverage data not to be used from this file)
load(file="../somy_all.RData")
setnames(all, c("chr","sample"), c("chrom","samp"))
# sample.info of groups
load(file="../../01_phylogenetic_reconstruction/sample.info_NEWsubgroups.RData")
#####################
#
# get coverages for samples from the various study origins
#
#####################
#
all[,RDmedianHaploid:=RDmedian/Somy]
all[,.(samp.median.haploid=median(RDmedianHaploid)), by=samp]
all[,.(samp.median.haploid=median(RDmedianHaploid)),]
all
all[,.(samp.median.haploid=median(RDmedianHaploid)), by=samp]
all[,RDmedianHaploid:=RDmedian/Somy]
med.med.cov<-all[,.(samp.median.haploid=median(RDmedianHaploid)), by=samp]
med.med.cov[, source:="thisStudy"]
med.med.cov[samp %in% c("BHU1065A1","BHU1137A1","BHU1139A1","BHU220A1","BHU816A1","BHU824A1","BHU931A1","BHU1064A1",
"BPK164A1","BPK649A1","BPK029A1","BPK035A1","BPK067A1","BPK077A1","BPK157A1",
"BPK294A1","BPK471A1","BPK562A1","BPK612A1","BPK623A1","BPK648A1","BPK156A1",
"BPK413A1","BPK406A1","BPK512A1",
"BD09","BD12","BD14","BD15","BD17","BD21","BD24","BD25"), source:="Imamura"]
# "Ldon282cl2","BPK282I9","BD27"
med.med.cov[samp %in% c("LinJPCM5"), source:="Peacock"]
med.med.cov[samp %in% c("CUK2","CUK3","CUK4","CUK5","CUK6","CUK7","CUK8","CUK10",
"CUK11","CUK12","CUK9"), source:="Rogers"]
med.med.cov[samp %in% c("X356WTV","X363SKWTI","X364SPWTII","X383WTI","AM560WTI","AM563WTI"), source:="Zackay"]
med.med.cov[samp %in% c("OVN3","CL.SL"), source:="Zhang"]
table(med.med.cov[,source])
# Imamura   Peacock    Rogers thisStudy    Zackay     Zhang
# 33         1        11        98         6         2
summary(med.med.cov[source=="thisStudy", samp.median.haploid])
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 9.75   20.12   26.73   28.38   33.75   87.58
